; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list -c --asm --interleave -o.\obj\can.o --asm_dir=.\LST\ --list_dir=.\LST\ --depend=.\obj\can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\HAL -I..\HAL\STM32F10x_FWLib\inc -I..\Drivers -I..\Applications\IAP -I..\Applications\SYSTEM -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=539 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\can.crf ..\Drivers\can.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN_Mode_Init PROC
;;;35         
;;;36     u8 CAN_Mode_Init(u8 tsjw,u8 tbs2,u8 tbs1,u16 brp,u8 mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;37     { 
000004  b08a              SUB      sp,sp,#0x28
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  f8dd8040          LDR      r8,[sp,#0x40]
;;;38     	GPIO_InitTypeDef 		GPIO_InitStructure; 
;;;39     	CAN_InitTypeDef        	CAN_InitStructure;
;;;40     	CAN_FilterInitTypeDef  	CAN_FilterInitStructure;
;;;41     #if CAN_RX0_INT_ENABLE 
;;;42     	NVIC_InitTypeDef  		NVIC_InitStructure;
;;;43     #endif
;;;44     
;;;45     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);//使能PORTA时钟	                   											 
000012  2101              MOVS     r1,#1
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;46     
;;;47     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);//使能CAN1时钟	
00001a  2101              MOVS     r1,#1
00001c  0648              LSLS     r0,r1,#25
00001e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;48     
;;;49     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000022  f44f5080          MOV      r0,#0x1000
000026  f8ad0024          STRH     r0,[sp,#0x24]
;;;50     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002a  2003              MOVS     r0,#3
00002c  f88d0026          STRB     r0,[sp,#0x26]
;;;51     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽
000030  2018              MOVS     r0,#0x18
000032  f88d0027          STRB     r0,[sp,#0x27]
;;;52     	GPIO_Init(GPIOA, &GPIO_InitStructure);			//初始化IO
000036  a909              ADD      r1,sp,#0x24
000038  485c              LDR      r0,|L1.428|
00003a  f7fffffe          BL       GPIO_Init
;;;53     
;;;54     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00003e  f44f6000          MOV      r0,#0x800
000042  f8ad0024          STRH     r0,[sp,#0x24]
;;;55     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;	//上拉输入
000046  2048              MOVS     r0,#0x48
000048  f88d0027          STRB     r0,[sp,#0x27]
;;;56     	GPIO_Init(GPIOA, &GPIO_InitStructure);			//初始化IO
00004c  a909              ADD      r1,sp,#0x24
00004e  4857              LDR      r0,|L1.428|
000050  f7fffffe          BL       GPIO_Init
;;;57     
;;;58     	//CAN单元设置
;;;59     	CAN_InitStructure.CAN_TTCM=DISABLE;			//非时间触发通信模式  
000054  2000              MOVS     r0,#0
000056  f88d001e          STRB     r0,[sp,#0x1e]
;;;60     	CAN_InitStructure.CAN_ABOM=DISABLE;			//软件自动离线管理	 
00005a  f88d001f          STRB     r0,[sp,#0x1f]
;;;61     	CAN_InitStructure.CAN_AWUM=DISABLE;			//睡眠模式通过软件唤醒(清除CAN->MCR的SLEEP位)
00005e  f88d0020          STRB     r0,[sp,#0x20]
;;;62     	CAN_InitStructure.CAN_NART=ENABLE;			//禁止报文自动传送 
000062  2001              MOVS     r0,#1
000064  f88d0021          STRB     r0,[sp,#0x21]
;;;63     	CAN_InitStructure.CAN_RFLM=DISABLE;		 	//报文不锁定,新的覆盖旧的  
000068  2000              MOVS     r0,#0
00006a  f88d0022          STRB     r0,[sp,#0x22]
;;;64     	CAN_InitStructure.CAN_TXFP=DISABLE;			//优先级由报文标识符决定 
00006e  f88d0023          STRB     r0,[sp,#0x23]
;;;65     	CAN_InitStructure.CAN_Mode= mode;	        //模式设置： mode:0,普通模式;1,回环模式; 
000072  f88d801a          STRB     r8,[sp,#0x1a]
;;;66     	//设置波特率
;;;67     	CAN_InitStructure.CAN_SJW=tsjw;				//重新同步跳跃宽度(Tsjw)为tsjw+1个时间单位  CAN_SJW_1tq	 CAN_SJW_2tq CAN_SJW_3tq CAN_SJW_4tq
000076  f88d401b          STRB     r4,[sp,#0x1b]
;;;68     	CAN_InitStructure.CAN_BS1=tbs1; 			//Tbs1=tbs1+1个时间单位CAN_BS1_1tq ~CAN_BS1_16tq
00007a  f88d601c          STRB     r6,[sp,#0x1c]
;;;69     	CAN_InitStructure.CAN_BS2=tbs2;				//Tbs2=tbs2+1个时间单位CAN_BS2_1tq ~	CAN_BS2_8tq
00007e  f88d501d          STRB     r5,[sp,#0x1d]
;;;70     	CAN_InitStructure.CAN_Prescaler=brp;        //分频系数(Fdiv)为brp+1	
000082  f8ad7018          STRH     r7,[sp,#0x18]
;;;71     	CAN_Init(CAN1, &CAN_InitStructure);        	//初始化CAN1 
000086  a906              ADD      r1,sp,#0x18
000088  4849              LDR      r0,|L1.432|
00008a  f7fffffe          BL       CAN_Init
;;;72     
;;;73     	CAN_FilterInitStructure.CAN_FilterNumber=0;	//过滤器0
00008e  2000              MOVS     r0,#0
000090  f88d0012          STRB     r0,[sp,#0x12]
;;;74     	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask; 	//屏蔽位模式
000094  f88d0013          STRB     r0,[sp,#0x13]
;;;75     	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; 	//32位宽 
000098  2001              MOVS     r0,#1
00009a  f88d0014          STRB     r0,[sp,#0x14]
;;;76     	CAN_FilterInitStructure.CAN_FilterIdHigh=0x0000;	//32位ID
00009e  2000              MOVS     r0,#0
0000a0  f8ad0008          STRH     r0,[sp,#8]
;;;77     	CAN_FilterInitStructure.CAN_FilterIdLow=0x0000;
0000a4  f8ad000a          STRH     r0,[sp,#0xa]
;;;78     	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0x0000;//32位MASK
0000a8  f8ad000c          STRH     r0,[sp,#0xc]
;;;79     	CAN_FilterInitStructure.CAN_FilterMaskIdLow=0x0000;
0000ac  f8ad000e          STRH     r0,[sp,#0xe]
;;;80     	CAN_FilterInitStructure.CAN_FilterFIFOAssignment=CAN_Filter_FIFO0;//过滤器0关联到FIFO0
0000b0  f8ad0010          STRH     r0,[sp,#0x10]
;;;81     	CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;//激活过滤器0
0000b4  2001              MOVS     r0,#1
0000b6  f88d0015          STRB     r0,[sp,#0x15]
;;;82     
;;;83     	CAN_FilterInit(&CAN_FilterInitStructure);			//滤波器初始化
0000ba  a802              ADD      r0,sp,#8
0000bc  f7fffffe          BL       CAN_FilterInit
;;;84     	
;;;85     #if CAN_RX0_INT_ENABLE 
;;;86     	CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);				//FIFO0消息挂号中断允许.		    
0000c0  2201              MOVS     r2,#1
0000c2  2102              MOVS     r1,#2
0000c4  483a              LDR      r0,|L1.432|
0000c6  f7fffffe          BL       CAN_ITConfig
;;;87     
;;;88     	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
0000ca  2014              MOVS     r0,#0x14
0000cc  f88d0004          STRB     r0,[sp,#4]
;;;89     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;     // 主优先级为1
0000d0  2001              MOVS     r0,#1
0000d2  f88d0005          STRB     r0,[sp,#5]
;;;90     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;            // 次优先级为0
0000d6  2000              MOVS     r0,#0
0000d8  f88d0006          STRB     r0,[sp,#6]
;;;91     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000dc  2001              MOVS     r0,#1
0000de  f88d0007          STRB     r0,[sp,#7]
;;;92     	NVIC_Init(&NVIC_InitStructure);
0000e2  a801              ADD      r0,sp,#4
0000e4  f7fffffe          BL       NVIC_Init
;;;93     #endif
;;;94     	return 0;
0000e8  2000              MOVS     r0,#0
;;;95     }   
0000ea  b00a              ADD      sp,sp,#0x28
0000ec  e8bd81f0          POP      {r4-r8,pc}
;;;96      
                          ENDP

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;98     //中断服务函数			    
;;;99     void USB_LP_CAN1_RX0_IRQHandler(void)
0000f0  b510              PUSH     {r4,lr}
;;;100    {
;;;101        CAN_Receive(CAN1, 0, &RxMessage);
0000f2  4a30              LDR      r2,|L1.436|
0000f4  2100              MOVS     r1,#0
0000f6  482e              LDR      r0,|L1.432|
0000f8  f7fffffe          BL       CAN_Receive
;;;102        CANRecFlag = 1;
0000fc  2001              MOVS     r0,#1
0000fe  492e              LDR      r1,|L1.440|
000100  7008              STRB     r0,[r1,#0]
;;;103        //Can_Send_Msg(0X01, RxMessage.Data, RxMessage.DLC);
;;;104    }
000102  bd10              POP      {r4,pc}
;;;105    #endif
                          ENDP

                  Can_Send_Msg PROC
;;;111    //		 其他,失败;
;;;112    u8 Can_Send_Msg(uint32_t ID,u8* msg,u8 len)
000104  e92d41f0          PUSH     {r4-r8,lr}
;;;113    {	
000108  b086              SUB      sp,sp,#0x18
00010a  4605              MOV      r5,r0
00010c  4688              MOV      r8,r1
00010e  4616              MOV      r6,r2
;;;114    	u8 mbox;
;;;115    	u16 i=0;
000110  2400              MOVS     r4,#0
;;;116    	CanTxMsg TxMessage;
;;;117    	TxMessage.StdId=ID;			// 标准标识符 
000112  9501              STR      r5,[sp,#4]
;;;118    	TxMessage.ExtId=ID;			// 设置扩展标示符 
000114  9502              STR      r5,[sp,#8]
;;;119    	TxMessage.IDE=CAN_Id_Standard; 	// 标准帧
000116  2000              MOVS     r0,#0
000118  f88d000c          STRB     r0,[sp,#0xc]
;;;120    	TxMessage.RTR=CAN_RTR_Data;		// 数据帧
00011c  f88d000d          STRB     r0,[sp,#0xd]
;;;121    	TxMessage.DLC=len;				// 要发送的数据长度
000120  f88d600e          STRB     r6,[sp,#0xe]
;;;122    	for(i=0;i<len;i++)
000124  bf00              NOP      
000126  e006              B        |L1.310|
                  |L1.296|
;;;123    	TxMessage.Data[i]=msg[i];			          
000128  f8181004          LDRB     r1,[r8,r4]
00012c  f10d000f          ADD      r0,sp,#0xf
000130  5501              STRB     r1,[r0,r4]
000132  1c60              ADDS     r0,r4,#1              ;122
000134  b284              UXTH     r4,r0                 ;122
                  |L1.310|
000136  42b4              CMP      r4,r6                 ;122
000138  dbf6              BLT      |L1.296|
;;;124    	mbox= CAN_Transmit(CAN1, &TxMessage);   
00013a  a901              ADD      r1,sp,#4
00013c  481c              LDR      r0,|L1.432|
00013e  f7fffffe          BL       CAN_Transmit
000142  4607              MOV      r7,r0
;;;125    	i=0; 
000144  2400              MOVS     r4,#0
;;;126    	while((CAN_TransmitStatus(CAN1, mbox)==CAN_TxStatus_Failed)&&(i<0XFFF))i++;	//等待发送结束
000146  e001              B        |L1.332|
                  |L1.328|
000148  1c60              ADDS     r0,r4,#1
00014a  b284              UXTH     r4,r0
                  |L1.332|
00014c  4639              MOV      r1,r7
00014e  4818              LDR      r0,|L1.432|
000150  f7fffffe          BL       CAN_TransmitStatus
000154  b918              CBNZ     r0,|L1.350|
000156  f64070ff          MOV      r0,#0xfff
00015a  4284              CMP      r4,r0
00015c  dbf4              BLT      |L1.328|
                  |L1.350|
;;;127    	if(i>=0XFFF)return 1;
00015e  f64070ff          MOV      r0,#0xfff
000162  4284              CMP      r4,r0
000164  db03              BLT      |L1.366|
000166  2001              MOVS     r0,#1
                  |L1.360|
;;;128    	return 0;	 
;;;129    }
000168  b006              ADD      sp,sp,#0x18
00016a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.366|
00016e  2000              MOVS     r0,#0                 ;128
000170  e7fa              B        |L1.360|
;;;130    //can口接收数据查询
                          ENDP

                  Can_Receive_Msg PROC
;;;133    //		 其他,接收的数据长度;
;;;134    u8 Can_Receive_Msg(u8 *buf)
000172  b530              PUSH     {r4,r5,lr}
;;;135    {		   		   
000174  b085              SUB      sp,sp,#0x14
000176  4605              MOV      r5,r0
;;;136     	u32 i;
;;;137    	CanRxMsg RxMessage;
;;;138        if( CAN_MessagePending(CAN1,CAN_FIFO0)==0)return 0;		//没有接收到数据,直接退出 
000178  2100              MOVS     r1,#0
00017a  480d              LDR      r0,|L1.432|
00017c  f7fffffe          BL       CAN_MessagePending
000180  b910              CBNZ     r0,|L1.392|
000182  2000              MOVS     r0,#0
                  |L1.388|
;;;139        CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);//读取数据	
;;;140        for(i=0;i<8;i++)
;;;141        buf[i]=RxMessage.Data[i];  
;;;142    	return RxMessage.DLC;	
;;;143    }
000184  b005              ADD      sp,sp,#0x14
000186  bd30              POP      {r4,r5,pc}
                  |L1.392|
000188  466a              MOV      r2,sp                 ;139
00018a  2100              MOVS     r1,#0                 ;139
00018c  4808              LDR      r0,|L1.432|
00018e  f7fffffe          BL       CAN_Receive
000192  2400              MOVS     r4,#0                 ;140
000194  e004              B        |L1.416|
                  |L1.406|
000196  f10d000b          ADD      r0,sp,#0xb            ;141
00019a  5d00              LDRB     r0,[r0,r4]            ;141
00019c  5528              STRB     r0,[r5,r4]            ;141
00019e  1c64              ADDS     r4,r4,#1              ;140
                  |L1.416|
0001a0  2c08              CMP      r4,#8                 ;140
0001a2  d3f8              BCC      |L1.406|
0001a4  f89d000a          LDRB     r0,[sp,#0xa]          ;142
0001a8  e7ec              B        |L1.388|
;;;144    
                          ENDP

0001aa  0000              DCW      0x0000
                  |L1.428|
                          DCD      0x40010800
                  |L1.432|
                          DCD      0x40006400
                  |L1.436|
                          DCD      RxMessage
                  |L1.440|
                          DCD      CANRecFlag

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RxMessage
                          %        20

                          AREA ||.data||, DATA, ALIGN=0

                  CANRecFlag
000000  00                DCB      0x00
