; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list -c --asm --interleave -o.\obj\iap.o --asm_dir=.\LST\ --list_dir=.\LST\ --depend=.\obj\iap.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\HAL -I..\HAL\STM32F10x_FWLib\inc -I..\Drivers -I..\Applications\IAP -I..\Applications\SYSTEM -ID:\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__UVISION_VERSION=539 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\iap.crf ..\Applications\IAP\iap.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  iap_write_appbin PROC
;;;8      
;;;9      void iap_write_appbin(u32 WriteAddr,u8 *pBuffer,u32 NumToWrite)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;10     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;11     	u32 i = 0;
00000a  2400              MOVS     r4,#0
;;;12     	u16 temp;
;;;13     
;;;14         if (WriteAddr < STM32_FLASH_BASE || (WriteAddr >= (STM32_FLASH_BASE + 1024 * STM32_FLASH_SIZE)))
00000c  f1b56f00          CMP      r5,#0x8000000
000010  d302              BCC      |L1.24|
000012  4841              LDR      r0,|L1.280|
000014  4285              CMP      r5,r0
000016  d304              BCC      |L1.34|
                  |L1.24|
;;;15         {
;;;16             printf("地址越界!\r\n");
000018  a040              ADR      r0,|L1.284|
00001a  f7fffffe          BL       __2printf
                  |L1.30|
;;;17             return;   
;;;18         }
;;;19               
;;;20         if(WriteAddr % STM_SECTOR_SIZE)
;;;21         {
;;;22             printf("地址非FLASH扇区首地址!\r\n");
;;;23             return;
;;;24         }
;;;25     
;;;26         /*开始写入*/
;;;27         FLASH_Unlock();
;;;28         while(1)
;;;29         {
;;;30             if(NumToWrite == 0)//上一个扇区刚好完整写完
;;;31             {
;;;32                 break;
;;;33             }
;;;34             else if(NumToWrite < STM_SECTOR_SIZE)//剩余要写入的内容不到一个扇区
;;;35             {
;;;36                 FLASH_ErasePage(WriteAddr); //擦除这个扇区 
;;;37                 
;;;38                 for(i = 0; i < NumToWrite; i += 2)
;;;39                 {
;;;40                     temp  = (u16)pBuffer[i + 1] << 8;
;;;41                     temp |= (u16)pBuffer[i];
;;;42                     FLASH_ProgramHalfWord(WriteAddr, temp);
;;;43                     WriteAddr += 2;
;;;44                 }
;;;45                 break; //写入结束，退出while
;;;46             }
;;;47             else
;;;48             {
;;;49                 FLASH_ErasePage(WriteAddr); //擦除这个扇区
;;;50                 
;;;51                 //写入整个扇区
;;;52                 for(i = 0; i < STM_SECTOR_SIZE; i += 2)
;;;53                 {
;;;54                     temp  = (u16)pBuffer[i + 1] << 8;
;;;55                     temp |= (u16)pBuffer[i];
;;;56                     FLASH_ProgramHalfWord(WriteAddr, temp);
;;;57                     WriteAddr += 2;
;;;58                 }
;;;59                
;;;60                 pBuffer += STM_SECTOR_SIZE;
;;;61                 NumToWrite -= STM_SECTOR_SIZE;
;;;62             }
;;;63         }
;;;64         FLASH_Lock(); //上锁
;;;65     }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.34|
000022  f3c50009          UBFX     r0,r5,#0,#10          ;20
000026  b118              CBZ      r0,|L1.48|
000028  a03f              ADR      r0,|L1.296|
00002a  f7fffffe          BL       __2printf
00002e  e7f6              B        |L1.30|
                  |L1.48|
000030  f7fffffe          BL       FLASH_Unlock
000034  e032              B        |L1.156|
                  |L1.54|
000036  b907              CBNZ     r7,|L1.58|
000038  e031              B        |L1.158|
                  |L1.58|
00003a  f5b76f80          CMP      r7,#0x400             ;34
00003e  d214              BCS      |L1.106|
000040  4628              MOV      r0,r5                 ;36
000042  f7fffffe          BL       FLASH_ErasePage
000046  2400              MOVS     r4,#0                 ;38
000048  e00c              B        |L1.100|
                  |L1.74|
00004a  1c60              ADDS     r0,r4,#1              ;40
00004c  5c30              LDRB     r0,[r6,r0]            ;40
00004e  ea4f2800          LSL      r8,r0,#8              ;40
000052  5d30              LDRB     r0,[r6,r4]            ;41
000054  ea400808          ORR      r8,r0,r8              ;41
000058  4641              MOV      r1,r8                 ;42
00005a  4628              MOV      r0,r5                 ;42
00005c  f7fffffe          BL       FLASH_ProgramHalfWord
000060  1cad              ADDS     r5,r5,#2              ;43
000062  1ca4              ADDS     r4,r4,#2              ;38
                  |L1.100|
000064  42bc              CMP      r4,r7                 ;38
000066  d3f0              BCC      |L1.74|
000068  e019              B        |L1.158|
                  |L1.106|
00006a  4628              MOV      r0,r5                 ;49
00006c  f7fffffe          BL       FLASH_ErasePage
000070  2400              MOVS     r4,#0                 ;52
000072  e00c              B        |L1.142|
                  |L1.116|
000074  1c60              ADDS     r0,r4,#1              ;54
000076  5c30              LDRB     r0,[r6,r0]            ;54
000078  ea4f2800          LSL      r8,r0,#8              ;54
00007c  5d30              LDRB     r0,[r6,r4]            ;55
00007e  ea400808          ORR      r8,r0,r8              ;55
000082  4641              MOV      r1,r8                 ;56
000084  4628              MOV      r0,r5                 ;56
000086  f7fffffe          BL       FLASH_ProgramHalfWord
00008a  1cad              ADDS     r5,r5,#2              ;57
00008c  1ca4              ADDS     r4,r4,#2              ;52
                  |L1.142|
00008e  f5b46f80          CMP      r4,#0x400             ;52
000092  d3ef              BCC      |L1.116|
000094  f5066680          ADD      r6,r6,#0x400          ;60
000098  f5a76780          SUB      r7,r7,#0x400          ;61
                  |L1.156|
00009c  e7cb              B        |L1.54|
                  |L1.158|
00009e  bf00              NOP                            ;32
0000a0  f7fffffe          BL       FLASH_Lock
0000a4  bf00              NOP      
0000a6  e7ba              B        |L1.30|
;;;66     
                          ENDP

                  iap_load_app PROC
;;;68     //appxaddr:用户代码起始地址
;;;69     void iap_load_app(u32 appxaddr)
0000a8  b570              PUSH     {r4-r6,lr}
;;;70     {
0000aa  4604              MOV      r4,r0
;;;71         unsigned char i = 0;
0000ac  2500              MOVS     r5,#0
;;;72     	if(((*(vu32*)appxaddr)&0x2FFE0000)==0x20000000)	//检查栈顶地址是否合法
0000ae  6820              LDR      r0,[r4,#0]
0000b0  4924              LDR      r1,|L1.324|
0000b2  4008              ANDS     r0,r0,r1
0000b4  f1b05f00          CMP      r0,#0x20000000
0000b8  d12c              BNE      |L1.276|
;;;73     	{ 
;;;74             /* 首地址是MSP，地址+4是复位中断服务程序地址 */
;;;75     		jump2app=(iapfun)*(vu32*)(appxaddr+4);
0000ba  6860              LDR      r0,[r4,#4]
0000bc  4922              LDR      r1,|L1.328|
0000be  6008              STR      r0,[r1,#0]  ; jump2app
;;;76                 
;;;77              /* 关闭全局中断 */
;;;78             __set_PRIMASK(1); 
0000c0  2001              MOVS     r0,#1
0000c2  f3808810          MSR      PRIMASK,r0
0000c6  bf00              NOP      
;;;79                      
;;;80             /* 关闭滴答定时器，复位到默认值 */
;;;81             SysTick->CTRL = 0;
0000c8  2000              MOVS     r0,#0
0000ca  f04f21e0          MOV      r1,#0xe000e000
0000ce  6108              STR      r0,[r1,#0x10]
;;;82             SysTick->LOAD = 0;
0000d0  6148              STR      r0,[r1,#0x14]
;;;83             SysTick->VAL = 0;
0000d2  6188              STR      r0,[r1,#0x18]
;;;84             
;;;85             /* 设置所有时钟到默认状态 */
;;;86             RCC_DeInit();
0000d4  f7fffffe          BL       RCC_DeInit
;;;87             
;;;88             /* 关闭所有中断，清除所有中断挂起标志 */  
;;;89             for (i = 0; i < 8; i++)
0000d8  bf00              NOP      
0000da  e009              B        |L1.240|
                  |L1.220|
;;;90             {
;;;91                 NVIC->ICER[i]=0xFFFFFFFF;
0000dc  f04f31ff          MOV      r1,#0xffffffff
0000e0  481a              LDR      r0,|L1.332|
0000e2  f8401025          STR      r1,[r0,r5,LSL #2]
;;;92                 NVIC->ICPR[i]=0xFFFFFFFF;
0000e6  481a              LDR      r0,|L1.336|
0000e8  f8401025          STR      r1,[r0,r5,LSL #2]
0000ec  1c68              ADDS     r0,r5,#1              ;89
0000ee  b2c5              UXTB     r5,r0                 ;89
                  |L1.240|
0000f0  2d08              CMP      r5,#8                 ;89
0000f2  dbf3              BLT      |L1.220|
;;;93             }
;;;94             
;;;95             /* 使能全局中断 */ 
;;;96             __set_PRIMASK(0);
0000f4  2000              MOVS     r0,#0
0000f6  f3808810          MSR      PRIMASK,r0
0000fa  bf00              NOP      
;;;97             
;;;98             /* 在RTOS工程，这条语句很重要，设置为特权级模式，使用MSP指针 */
;;;99             __set_CONTROL(0);
0000fc  bf00              NOP      
0000fe  f3808814          MSR      CONTROL,r0
000102  bf00              NOP      
;;;100            
;;;101            MSR_MSP(*(vu32*)appxaddr);					//初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址)
000104  6820              LDR      r0,[r4,#0]
000106  f7fffffe          BL       MSR_MSP
;;;102    		jump2app();									//跳转到APP.
00010a  480f              LDR      r0,|L1.328|
00010c  6800              LDR      r0,[r0,#0]  ; jump2app
00010e  4780              BLX      r0
;;;103            
;;;104            /* 跳转成功的话，不会执行到这里，用户可以在这里添加代码 */
;;;105            while (1)
000110  bf00              NOP      
                  |L1.274|
000112  e7fe              B        |L1.274|
                  |L1.276|
;;;106            {
;;;107    
;;;108            }
;;;109    	}
;;;110    }		 
000114  bd70              POP      {r4-r6,pc}
;;;111    
                          ENDP

000116  0000              DCW      0x0000
                  |L1.280|
                          DCD      0x08010000
                  |L1.284|
00011c  b5d8d6b7          DCB      181,216,214,183,212,189,189,231,"!\r\n",0
000120  d4bdbde7
000124  210d0a00
                  |L1.296|
000128  b5d8d6b7          DCB      181,216,214,183,183,199,"FLASH",201,200,199,248,202,215,181
00012c  b7c7464c
000130  415348c9
000134  c8c7f8ca
000138  d7b5    
00013a  d8d6b721          DCB      216,214,183,"!\r\n",0
00013e  0d0a00  
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L1.324|
                          DCD      0x2ffe0000
                  |L1.328|
                          DCD      jump2app
                  |L1.332|
                          DCD      0xe000e180
                  |L1.336|
                          DCD      0xe000e280

                          AREA ||.data||, DATA, ALIGN=2

                  jump2app
                          DCD      0x00000000
